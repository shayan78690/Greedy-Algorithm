class Solution {
    public List<int[]> mergeOverlap(int[][] arr) {
        // Code here // Code here
        int n = arr.length;
        Arrays.sort(arr, (a, b) -> a[0] - b[0]);
        List<int[]> list = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            if(list.isEmpty() || list.get(list.size()-1)[1] < arr[i][0]) {
                list.add(arr[i]);
            } else {
                list.get(list.size()-1)[1] = Math.max(list.get(list.size()-1)[1], arr[i][1]);
            }
        }
        return list;
    }
}













class Solution {
    public List<int[]> mergeOverlap(int[][] arr) {
        int n = arr.length;
        Arrays.sort(arr, (a, b) -> a[0] - b[0]);
        
        List<int[]> ans = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            int start = arr[i][0];
            int end = arr[i][1];
            
            if(!ans.isEmpty() && ans.get(ans.size()-1)[1] >= end) {
                continue;
            }
            
            for(int j = i+1; j < n; j++) {
                if(arr[j][0] <= end) {
                    end = Math.max(end, arr[j][1]);
                } else {
                    break;
                }
            }
            ans.add(new int[]{start, end});
        }
        return ans;
    }
}
